From 782f6fca009825c00b95e22c581b7fd6fb94d7ee Mon Sep 17 00:00:00 2001
From: erik96 <ariesrik96@gmail.com>
Date: Sat, 27 Apr 2013 22:25:10 +0300
Subject: [PATCH] Dynamic read-ahead support

Conflicts:

	block/blk-core.c
---
 block/blk-core.c   |  3 +--
 block/genhd.c      | 20 ++++++++++++++++++++
 fs/fuse/inode.c    |  2 +-
 include/linux/mm.h |  6 ++++--
 mm/readahead.c     | 30 ++++++++++++++++++++++++++++++
 5 files changed, 56 insertions(+), 5 deletions(-)

diff --git a/block/blk-core.c b/block/blk-core.c
index 68d7158..2d273d9 100644
--- a/block/blk-core.c
+++ b/block/blk-core.c
@@ -487,8 +487,7 @@ struct request_queue *blk_alloc_queue_node(gfp_t gfp_mask, int node_id)
 	if (q->id < 0)
 		goto fail_q;
 
-	q->backing_dev_info.ra_pages =
-			(VM_MAX_READAHEAD * 1024) / PAGE_CACHE_SIZE;
+	q->backing_dev_info.ra_pages = max_readahead_pages;
 	q->backing_dev_info.state = 0;
 	q->backing_dev_info.capabilities = BDI_CAP_MAP_COPY;
 	q->backing_dev_info.name = "block";
diff --git a/block/genhd.c b/block/genhd.c
index 53c3f7e..759fc77 100644
--- a/block/genhd.c
+++ b/block/genhd.c
@@ -623,6 +623,26 @@ void add_disk(struct gendisk *disk)
 				   "bdi");
 	WARN_ON(retval);
 
+	/*
+	 * Limit default readahead size for small devices.
+	 *        disk size    readahead size
+	 *               1M                8k
+	 *               4M               16k
+	 *              16M               32k
+	 *              64M               64k
+	 *             256M              128k
+	 *               1G              256k
+	 *               4G              512k
+	 *              16G             1024k
+	 *              64G             2048k
+	 *             256G             4096k
+	 */
+	if (get_capacity(disk)) {
+		unsigned long size = get_capacity(disk) >> 9;
+		size = 1UL << (ilog2(size) / 2);
+		bdi->ra_pages = min(bdi->ra_pages, size);
+	}
+
 	disk_add_events(disk);
 }
 EXPORT_SYMBOL(add_disk);
diff --git a/fs/fuse/inode.c b/fs/fuse/inode.c
index 26783eb..88f5265 100644
--- a/fs/fuse/inode.c
+++ b/fs/fuse/inode.c
@@ -877,7 +877,7 @@ static int fuse_bdi_init(struct fuse_conn *fc, struct super_block *sb)
 	int err;
 
 	fc->bdi.name = "fuse";
-	fc->bdi.ra_pages = (VM_MAX_READAHEAD * 1024) / PAGE_CACHE_SIZE;
+	fc->bdi.ra_pages = max_readahead_pages;
 	/* fuse does it's own writeback accounting */
 	fc->bdi.capabilities = BDI_CAP_NO_ACCT_WB;
 
diff --git a/include/linux/mm.h b/include/linux/mm.h
index ddfb7c5..c3ae5f6 100644
--- a/include/linux/mm.h
+++ b/include/linux/mm.h
@@ -1425,8 +1425,10 @@ extern void truncate_inode_pages_range(struct address_space *,
 void task_dirty_inc(struct task_struct *tsk);
 
 /* readahead.c */
-#define VM_MAX_READAHEAD	128	/* kbytes */
-#define VM_MIN_READAHEAD	16	/* kbytes (includes current page) */
+#define VM_MAX_READAHEAD   2048 /* kbytes */
+#define VM_MIN_READAHEAD     32 /* kbytes (includes current page) */
+
+extern unsigned long max_readahead_pages;
 
 int force_page_cache_readahead(struct address_space *mapping, struct file *filp,
 			pgoff_t offset, unsigned long nr_to_read);
diff --git a/mm/readahead.c b/mm/readahead.c
index cbcbb02..8e10759 100644
--- a/mm/readahead.c
+++ b/mm/readahead.c
@@ -18,6 +18,36 @@
 #include <linux/pagevec.h>
 #include <linux/pagemap.h>
 
+unsigned long max_readahead_pages = VM_MAX_READAHEAD * 1024 / PAGE_CACHE_SIZE;
+
+static int __init readahead(char *str)
+{
+	unsigned long bytes;
+
+	if (!str)
+		return -EINVAL;
+
+	bytes = memparse(str, &str);
+
+	if (*str != '\0')
+		return -EINVAL;
+
+	if (bytes) {
+		if (bytes < PAGE_CACHE_SIZE) /* missed 'k'/'m' suffixes? */
+			return -EINVAL;
+
+		if (bytes > 256 << 20)       /* limit to 256MB */
+			bytes = 256 << 20;
+	}
+
+	max_readahead_pages = bytes / PAGE_CACHE_SIZE;
+	default_backing_dev_info.ra_pages = max_readahead_pages;
+
+	return 0;
+}
+
+early_param("readahead", readahead);
+
 /*
  * Initialise a struct file's readahead state.  Assumes that the caller has
  * memset *ra to zero.
-- 
1.8.5.1

